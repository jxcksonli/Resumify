const express = require('express');
const cors = require('cors');
const multer = require('multer');
const { exec } = require('child_process');
const fs = require('fs-extra');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());
app.use(express.static('public'));

const tempDir = path.join(__dirname, 'temp');
fs.ensureDirSync(tempDir);

const generateLatexTemplate = (resumeData) => {
  const {
    name = 'Your Name',
    phone = '+1 234 567 890',
    email = 'your.email@example.com',
    linkedin = 'linkedin.com/in/yourprofile',
    education = [],
    experience = [],
    skills = [],
    projects = [],
    achievements = []
  } = resumeData;

  const educationSection = education.length > 0 ? `
\\section{Education}
  \\resumeSubHeadingListStart
    ${education.map(edu => `
    \\resumeSubheading
      {${edu.institution || 'Institution'}}{${edu.location || 'Location'}}
      {${edu.degree || 'Degree'}}{${edu.dates || 'Dates'}}
      ${edu.details && edu.details.length > 0 ? `
      \\resumeItemListStart
        ${edu.details.map(detail => `\\resumeItem{${detail}}`).join('\n        ')}
      \\resumeItemListEnd` : ''}
    `).join('')}
  \\resumeSubHeadingListEnd
` : '';

  const experienceSection = experience.length > 0 ? `
\\section{Experience}
  \\resumeSubHeadingListStart
    ${experience.map(exp => `
    \\resumeSubheading
      {${exp.title || 'Job Title'}}{${exp.dates || 'Dates'}}
      {${exp.company || 'Company'}}{${exp.location || 'Location'}}
      ${exp.details && exp.details.length > 0 ? `
      \\resumeItemListStart
        ${exp.details.map(detail => `\\resumeItem{${detail}}`).join('\n        ')}
      \\resumeItemListEnd` : ''}
    `).join('')}
  \\resumeSubHeadingListEnd
` : '';

  const skillsSection = skills.length > 0 ? `
\\section{Skills}
 \\begin{itemize}[leftmargin=0.15in, label={}]
    \\small{\\item{
     ${skills.map(skill => `\\textbf{${skill.category}}{: ${skill.items}}`).join(' \\\\\n     ')}
    }}
 \\end{itemize}
` : '';

  const projectsSection = projects.length > 0 ? `
\\section{Projects}
    \\resumeSubHeadingListStart
      ${projects.map(proj => `
      \\resumeProjectHeading
          {\\textbf{${proj.name || 'Project Name'}} $|$ \\emph{${proj.technologies || 'Technologies'}}}{${proj.dates || 'Dates'}}
          ${proj.details && proj.details.length > 0 ? `
          \\resumeItemListStart
            ${proj.details.map(detail => `\\resumeItem{${detail}}`).join('\n            ')}
          \\resumeItemListEnd` : ''}
      `).join('')}
    \\resumeSubHeadingListEnd
` : '';

  const achievementsSection = achievements.length > 0 ? `
\\section{Achievements}
 \\begin{itemize}[leftmargin=0.15in, label={}]
    \\small{\\item{
     ${achievements.map(ach => `\\textbf{${ach}}`).join(' \\\\\n     ')}
    }}
 \\end{itemize}
` : '';

  return `%-------------------------
% Resume in Latex
% Generated by Resumify
%------------------------

\\documentclass[letterpaper,11pt]{article}

\\usepackage{latexsym}
\\usepackage[empty]{fullpage}
\\usepackage{titlesec}
\\usepackage{marvosym}
\\usepackage[usenames,dvipsnames]{color}
\\usepackage{verbatim}
\\usepackage{enumitem}
\\usepackage[hidelinks]{hyperref}
\\usepackage{fancyhdr}
\\usepackage[english]{babel}
\\usepackage{tabularx}
\\input{glyphtounicode}

\\pagestyle{fancy}
\\fancyhf{}
\\fancyfoot{}
\\renewcommand{\\headrulewidth}{0pt}
\\renewcommand{\\footrulewidth}{0pt}

\\addtolength{\\oddsidemargin}{-0.5in}
\\addtolength{\\evensidemargin}{-0.5in}
\\addtolength{\\textwidth}{1in}
\\addtolength{\\topmargin}{-.5in}
\\addtolength{\\textheight}{1.0in}

\\urlstyle{same}

\\raggedbottom
\\raggedright
\\setlength{\\tabcolsep}{0in}

\\titleformat{\\section}{
  \\vspace{-4pt}\\scshape\\raggedright\\large
}{}{0em}{}[\\color{black}\\titlerule \\vspace{-5pt}]

\\pdfgentounicode=1

\\newcommand{\\resumeItem}[1]{
  \\item\\small{
    {#1 \\vspace{-2pt}}
  }
}

\\newcommand{\\resumeSubheading}[4]{
  \\vspace{-2pt}\\item
    \\begin{tabular*}{0.97\\textwidth}[t]{l@{\\extracolsep{\\fill}}r}
      \\textbf{#1} & #2 \\\\
      \\textit{\\small#3} & \\textit{\\small #4} \\\\
    \\end{tabular*}\\vspace{-7pt}
}

\\newcommand{\\resumeSubSubheading}[2]{
    \\item
    \\begin{tabular*}{0.97\\textwidth}{l@{\\extracolsep{\\fill}}r}
      \\textit{\\small#1} & \\textit{\\small #2} \\\\
    \\end{tabular*}\\vspace{-7pt}
}

\\newcommand{\\resumeProjectHeading}[2]{
    \\item
    \\begin{tabular*}{0.97\\textwidth}{l@{\\extracolsep{\\fill}}r}
      \\small#1 & #2 \\\\
    \\end{tabular*}\\vspace{-7pt}
}

\\newcommand{\\resumeSubItem}[1]{\\resumeItem{#1}\\vspace{-4pt}}

\\renewcommand\\labelitemii{$\\vcenter{\\hbox{\\tiny$\\bullet$}}$}

\\newcommand{\\resumeSubHeadingListStart}{\\begin{itemize}[leftmargin=0.15in, label={}]}
\\newcommand{\\resumeSubHeadingListEnd}{\\end{itemize}}
\\newcommand{\\resumeItemListStart}{\\begin{itemize}}
\\newcommand{\\resumeItemListEnd}{\\end{itemize}\\vspace{-5pt}}

\\begin{document}

\\begin{center}
    \\textbf{\\Huge \\scshape ${name}} \\\\ \\vspace{1pt}
    \\small ${phone} $|$ \\href{mailto:${email}}{\\underline{${email}}} $|$ 
    \\href{https://${linkedin}}{\\underline{${linkedin}}}
\\end{center}

${educationSection}
${experienceSection}
${projectsSection}
${skillsSection}
${achievementsSection}

\\end{document}`;
};

app.post('/api/compile', async (req, res) => {
  const { resumeData } = req.body;
  const sessionId = uuidv4();
  const sessionDir = path.join(tempDir, sessionId);
  
  try {
    await fs.ensureDir(sessionDir);
    
    const latexContent = generateLatexTemplate(resumeData);
    const texFile = path.join(sessionDir, 'resume.tex');
    const pdfFile = path.join(sessionDir, 'resume.pdf');
    
    await fs.writeFile(texFile, latexContent);
    
    exec(`pdflatex -output-directory="${sessionDir}" "${texFile}"`, (error, stdout, stderr) => {
      if (error) {
        console.error('LaTeX compilation error:', error);
        return res.status(500).json({ error: 'Failed to compile LaTeX', details: stderr });
      }
      
      fs.readFile(pdfFile, (err, data) => {
        if (err) {
          return res.status(500).json({ error: 'Failed to read PDF file' });
        }
        
        res.contentType('application/pdf');
        res.send(data);
        
        setTimeout(() => {
          fs.remove(sessionDir).catch(console.error);
        }, 60000);
      });
    });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/latex', async (req, res) => {
  const { resumeData } = req.body;
  
  try {
    const latexContent = generateLatexTemplate(resumeData);
    res.json({ latex: latexContent });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: 'Failed to generate LaTeX' });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});